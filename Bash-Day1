//GEN INFO
//CTFD - 10.50.34.146, TADA-M-505, dj@dt2.net, S00kie!!!Q467912
//DOWNLOAD ALL GITHUB MATERIAL BEFORE TEST DAY
//STILL DO THE FOLLOWING:
//ssh -X student@10.50.41.179
 37 //HOW TO ssh to vta box
 38 //terminator
------------------------------------------------------------------------------------------------------------
QUICK REFERENCE:
history - HISTORY OF COMMANDS
!! - RUN LAST COMMAND
!# - RUN COMMAND IN HISTORY REFERENCED BY NUMBER
ctrl + LFT OR RHT ARROW - SCRUB BY WORDS THROUGH A COMMAND BEING WRITTEN
ctrl + u ERASES LINE
ctrl + r SEARCHES HISTORY, START TYPING 
ctrl + l CLEAR SCREEN
REMEMBER MAN PAGE!! man <cmd> 
 / (FWD SLASH) TO SEARCH MAN PAGE!!!
REMEMBER TAB AND AUTOCOMPLETE!!!
REMEMBER GOOGLE!!!
cht.sh - QUICK REFERENCE WEBPAGE DESIGNED TO WORK IN CMDLINE
curl https://cht.sh/
curl - CMD TO ACCESS WEBPAGE
curl https://cht.sh/[CMD OR WHAT YOU WANT TO KNOW]
ls - list files, -l (long) (note permissions in furthest left field)
mkdir - make directory
rm - remove, -r (recursive)
echo ~ OR echo $HOME (show home directory), (~ = quick reference for home), ($HOME holds variable for where "home" is)
pwd - print working directory
cat - view file, cat pass
head - view top 10 line by default
tail - view last 10 lines by default
ls .. - RELATIVE FILEPATH
locate find - SEARCHES FILES BASED ON KEYWORD
whereis find - DISPLAYS WHERE A CMD IS EXECUTED FROM
find *.exe - FIND ALL FILES WITH ".exe" ENDING, REPLACE FILE EXTENSION WITH WHATEVER DESIRED
find / -name "*.bin"
iname - CASE INSENSITIVE VERSION OF name
find . -type f -exec file '{}' \;
 RUNS 'file' ON EVERY FILE IN OR BELOW THE CURRENT DIR, NOTE BRACES ARE ENLCOSED IN SINGLE QUOTES TO PROTECT THEM FROM
 INTERPRETATION AS SHELL SCRIPT PUNCTUATION 
find -mtime 2 - LOOK FOR ANYTHING MODIFIED WITHIN LAST TWO DAYS
find / -empty - FINDS ALL EMPTY FILES
find / -empty -maxdepth2 - FINDS ALL EMPTY FILES UP TO A DEPTH OF TWO SUB-DIRECTORIES
find / - executable - FINDS ALL EXECUTABLES
! - EXCLUDE THE FOLLOWING
grep - LOOK FOR PATTERNS
cat /etc/passwd -LOOK IN PASSWD FILE
grep student /etc/passwd  -SEARCH FOR "student" WITHIN THE "/etc/passwd" FILE
grep <pattern> <file> IS PROPER SYNTAX
cat /etc/passwd | grep root - WORKS SIMILAR TO LINE 49, BUT SEARCHES FOR "root" 
egrep - BETTER GREP, egrep "root|student" FOR EXAMPLES (CAN PASS VARIABLES AND LOGIC TO egrep)
cat /etc/passwd | egrep "^[a-zA-Z]" (REGEX EXAMPLE)
grep - o OR egrep - o - ONLY GRAB THE MATCHING PARTS OF THE LINES
grep -v OR egrep -v - EXCLUDE MATCHES
grep -A# -AFTER LAST MATCH, PRINT THE FOLLOWING NUMBER OF LINES
grep -B# - BEFORE LAST MATCH, PRINT THE FOLLOWING NUMBER OF LINES
grep -C# -PRINT LINES BEFORE AND AFTER FIRST AND LAST MATCH
ps - WHAT IS CURRENT USER RUNNING
ps -elf - EVERYTHING RUNNING
ps -elf --forest -EVERYTHING RUNNING, ORGANIZED BASED ON PARENT-CHILD RELATIONSHIPS (CHILD PROCESSES)
PS  - ELF | GREP BANNER
killall (str) - KILL ALL SEARCHED BY KEYWORD, "killall firefox" FOR EXAMPLE
touch test.1
touch test.2
echo one > test.1
// > = REDIRECT TO FILE, IF NONEXISTENT, CREATE FILE
echo one >> test.1
cat test.1
find / -name *.bin 2>error.log
//SEND ALL ERROR MESSAGES TO error.log
find / -name *.bin 2> /dev/null
//SEND ALL ERRORS TO TRASH ESSENTIALLY
tail passwd | cut -d: -f3
//CUT OUTPUT OF tail passwd (LAST 10 LINE OF FILE) DOWN TO ONLY CERTAIN FIELDS, IN THIS CASE FIELD 3
grep root passwd | cut -d: -f1
//FOR ANY LINE WITH "root" PRINT FIELD 1
touch file{a,b,c}.txt
//CREATES THREE FILES WITH THE .txt EXTENSION
touch file{1..10}.txt
//CREATES FILES 1-10 WITH .txt EXTENSION
CMD <ARGUMENT>{} ALLOWS YOU TO PUT MULTIPLE INPUTS IN ONE LINE AS SEEN ABOVE
tail /etc/passwd | awk -F :v NUM="1000" '($3 >= NUM ) {print $3}'
//awk ALLOWS FOR COMPARISON BY DIFFERENT FIELDS
sort <file>
//SORTS ALPHANUMERICALLY BY DEFAULT, PER CHARACTER, SO 10 WOULD COME BEFORE 3, SO 1,11,12,2,3,41,5,A,ABC,B,C
(()) - DEFINES MATH WITH EXPRESSION IN THE MIDDLE
sort -nu (SORT NUMERICALLY WITH NON-NUMERIC VALUES BEFORE NUMBERS, THEN NUMERICALLY)
cat <file> | sort | uniq -c | sort -nr
//CAT CONTENTS, SORT WITH UNIQUE COUNT, NUMERICALLY SORT IN REVERSE BY COUNT 
------------------------------------------------------------------------------------------------------------
//SCRIPT /FUNCTION CREATION
vim test.sh
#!/bin/bash
if [[condition]]; then
 #do these commands
elif[[condition]]; then
 #do these cmmands
else
 #do this instead if no other conditions are met
if [[ -f /etc/passwd ]]; then //IF THAT FILE EXISTS
 echo "/etc/passwd file exists"
elif [[ ! -f /etc/passwd ]]; then //IF THAT FILE DOES NOT EXIST
 echo "/etc/passwd file does NOT exist"
else
 echo "something went wrong :("
fi
chmod +x test.sh //ASSIGNING EXECUTABLE PERMISSION TO FILE
./<SCRIPT FILE> 
//LINUX DOESN'T CARE ABOUT TABS GENERALLY, UNLIKE PYTHON
(()) = MATH, AS AFOREMENTIONED, () = COMMAND IN SUBSHELL!!!
vim matthtest.sh
#!/bin/bash
if [[ 3129 == $(( 15645/5 )) ]]; then
 echo "math checks out"
else
 echo "no good"
chmod +x mathtest.sh
./<SCRIPT FILE>
vim 
alias PRINTS OUT ALL CURRENT ALIASES, SET BY .bashrc
a=test
echo $a WILL RETURN test WITHIN THAT SHELL UNLESS SAVED INTO THE .bashrc FILE
------------------------------------------------------------------------------------------------------------
SCRIPT GENERAL NOTES
== FOR STRINGS
-eq FOR NUMBERS
-le LESS THAN, EQUAL TO
-ge GREATER THAN, EQUAL TO
ITS BACKWARDS, YEAH
cat sedwhat.txt | sed 's/ANCHOVIES/SAUSAGE/g'
sed -e 's/ANCHOVIES/SAUSAGE/g' -e 's/anchovies/SAUSAGE/g' sedwhat.txt //REPLACES THE FORMER WITH THE LATTER
sed '/pizza/d' sedwhat.txt //DELETES ALL LINES WITH pizza IN IT
//sed 's+pizza+sandwhich+' sedwhat.txt //REPLACES PIZZA WITH SANDWHICH

/pattern/d
//PATTERN/INDICATE DELETE WITH /d
pizza is good
s first indicates substiti
sed 
------------------------------------------------------------------------------------------------------------
Activity: Using Brace-Expansion, create the following directories within the $HOME directory:
  ANSWER: mkdir ~/{1123,1134,1145,1156} 
Activity: Use Brace-Expansion to create the following files within the $HOME/1123 directory. 
You may need to create the $HOME/1123 directory. Make the following files, but utilze Brace Expansion to make all nine files with one touch command.
  ANSWER: mkdir ~/1123, touch ~/1123/{1,2,3,4,5,6~,7~,8~,9~}.txt
Activity: Activity: Using the find command, list all files in $HOME/1123 that end in .txt.
  ANSWER: find ~/1123/*.txt
Activity: Using the find command, list all files in $HOME/1123 that end in .txt
  ANSWER: find ~/1123/*.txt
Activity: List all files in $HOME/1123 that end in .txt. Omit the files containing a tilde (~) character.
  ANSWER: find ~/1123/*.txt ! -path '*~.txt'
Activity: Copy all files in the $HOME/1123 directory, that end in ".txt", and omit files containing a tilde "~" character, to directory $HOME/CUT.
 ANSWER: find ~/1123/*.txt ! -path '*~.txt' -exec cp {} ~/CUT \;
Activity: Using ONLY the find command, find all empty files/directories in directory /var and print out ONLY the filename (not absolute path), and the inode number, separated by newlines.
  ANSWER: find /var -empty -printf '%i %f\n'
Activity: Using ONLY the find command, find all files on the system with inode 4026532575 and print only the filename to the screen, not the absolute path to the file, separating each filename with a newline. Ensure unneeded output is not visible.
  ANSWER: find / -inum 4026532575 -printf '%i %f\n'
Activity:Using only the ls -l and cut Commands, write a BASH script that shows all filenames with extensions ie: 1.txt, etc., but no directories, in $HOME/CUT.
Write those to a text file called names in $HOME/CUT directory.
Omit the names filename from your output.
  ANSWER: ls -l ~/CUT/ | cut -d':' -f2 | cut -d' ' -f2 | cut -d '.' -f1- -s > ~/CUT/names
Activity: Write a basic bash script that greps ONLY the IP addresses in the text file provided (named StoryHiddenIPs in the current directory); sort them uniquely by number of times they appear.
  ANSWER: grep -E -o '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)' StoryHiddenIPs | sort | uniq -c | sort -nr
Activity: Using ONLY the awk command, write a BASH one-liner script that extracts ONLY the names of all the system and user accounts that are not UIDs 0-3.
Only display those that use /bin/bash as their default shell.
The input file is named $HOME/passwd and is located in the current directory.
Output the results to a file called $HOME/SED/names.txt
  ANSWER: awk -F: '($3 > 3)' ~/passwd | awk -F: '($NF == "/bin/bash"){print $1}' > ~/SED/names.txt





Activity: Using ONLY sed, write all lines from $HOME/passwd into $HOME/PASS/passwd.txt that do not end with either /bin/sh or /bin/false.
  ANSWER: sed '/\/bin\/sh/d' ~/passwd | sed '/\/bin\/false/d' ~/passwd > ~/PASS/passwd.txt

