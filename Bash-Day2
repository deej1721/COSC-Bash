//BASH VARIABLES AND PARAMETERS
A=120
echo $A
//THIS WILL OUTPUT 120 AS A HAS BEEN ASSIGNED THE VALUE OF 120
B=20
expr $A-$B
//THIS WILL RETURN 100 AS 120-20=100, AND expr ALLOWED THE MATH TO OCCUR
C=$(expr $A-$B)
//THIS WILL RETURN C, WHICH HAS BEEN THE VALUE OF 100 BY THE COMMAND SUBSTITUTION ALLOWED BY =$(CMD OR WHATEVER YOU WANT TO HAPPEN TO ASSIGN VALUE TO THE VARIABLE)
echo $# - NUMBER OF ARGUMENTS PASSED IN CURRENT SCRIPT 
echo $0
echo $* - THE CONTENTS OF ALL ARGUMENTS PASSED IN CURRENT SCRIPT
echo $$ - PID OF CURRENT SHELL
echo $- - FLAGS SET IN SHELL
echo $2...3 - A SPECIFIC ARGUMENT PASSED IN THE SHELL LISTED OUT AND REFERENCD BY NUMBER IN WHICH IT OCCURED 
FLAGS:
H - HISTEXPAND
m - MONITOR
h -  HASHALL
B - BRACEXPAND
i - INTERACTIVE
./TestScript.sh $A1
---
//FUNCTION DECLARATION:
#!/bin/bash
  function myFunction{
    Echo "this is myFunction"
}
myfunc(){
    Echo "myfunc"
}
function aFunc(){
Echo "Another function"
}
myFunction
myFunc
aFunc
---
//GATHERING USER INPUT:
#!/bin/bash
function getuserchoice(){
  echo "Make a choice [1,2,3]:"
  read userchoice
  case $userchoice in 
    (1) echo one;;
    (2) echo two;;
    (3) echo three;;
    (*) echo other;;
  esac
}
getuserchoice
-----
VARIABLE SUBSTIUTION:
#!/bin/bash
A=$1
echo The story of Robert the $A
echo The $A was at the $Astore so we could buy $A clothes!
-
chmod +x var_sub.sh
./var_sub.sh blue
RETURNS 
echo The story of Robert the blue
echo The blue was at the so we could buy blue clothes!
//ASSIGNING A VARIABLE TO $1 ALLOWS THE VALUE TO BE PASSED TO THE SCRIPT BY THE USER AT SCRIPT EXECUTION
//NOTICE HOW $Astore DID NOT PRINT AS IT DID NOT EXIST AS A VALUE AND COULD NOT BE DECIPHERED
    "$A"store WOULD HAVE ALLOWED THE VALUE TO PRINT, '$A'store WOULD HAVE RETURNED '$A'store LITERALLY
------------------------------------------------------------------------------------------------------------
CTFD CHALLENGES 15-19
Activity: Using find, find all files under the $HOME directory with a .bin extension ONLY.
Once the file(s) and their path(s) have been found, remove the file name from the absolute path output.
Ensure there is no trailing / at the end of the directory path when outputting to standard output.
You may need to sort the output depending on the command(s) you use.
  ANSWER: find ~/ -iname "*.bin" | awk 'BEGIN{FS=OFS="/"}{NF--}1' | sort | uniq
Activity: Write a script which will copy the last entry/line in the passwd-like file specified by the $1 positional parameter
Modify the copied line to change:
User name to the value specified by $2 positional parameter
Used id and group id to the value specified by $3 positional parameter
Home directory to a directory matching the user name specified by $2 positional parameter under the /home directory
The default shell to `/bin/bash'
Append the modified line to the end of the file
  ANSWER: tail -1 $1 | awk -F: -v "username=$2" -v "uidgid=$3" '{OFS=":"} {$1=username} {$3=uidgid} {$4=uidgid} {$6="/home/"username} {$NF="/bin/bash"} {print $0}' >> $1
Activity: Find all executable files under the following four directories: /bin /sbin /usr/bin /usr/sbin
Sort the filenames with absolute path, and get the md5sum of the 10th file from the top of the list.
  ANSWER: md5sum $(find /bin /sbin /usr/bin /usr/sbin -executable -type f | sort | head | tail -1 ) | cut -d" " -f1
Activity: Using any BASH command complete the following: Sort the /etc/passwd file numerically by the GID field. For the 10th entry in the sorted passwd file, 
 get an md5 hash of that entryâ€™s home directory. Output ONLY the MD5 hash of the directory's name to standard output.
ANSWER: sort -t: -nk4 /etc/passwd | sed '10q;d' | awk -F: '{print $6}' | md5sum | cut -d- -f1
Activity: Write a script which will find and hash the contents 3 levels deep from each of these directories: /bin /etc /var
Your script should: Exclude named pipes. These can break your script. Redirect STDOUT and STDERR to separate files. Determine the count of files hashed in the file with hashes.
Determine the count of unsuccessfully hashed directories. Have both counts output to the screen with an appropriate title for each count.
ANSWER:
md5sum $(find /bin /etc /var -maxdepth 3) 2>~/err 1>~/out
echo "Successfully Hashed Files: $(cat ~/out | wc -l)"
echo "Unsuccessfully Hashed Directories: $(egrep -i "is a directory" ~/err | wc -l)"
