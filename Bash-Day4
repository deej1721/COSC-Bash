PRACTICE TEST ACTIVITIES, ANSWERS, AND INSTRUCTOR SOLUTIONS
GOOD LUCK!!!
------------------------------------------------------------------------------------------------------------
Activity 1:

Create a script that will perform the following actions:
Replace every instance of 'cat' in "infile" with 'dog'.
Replace every instance of 'Navy' in "infile" with 'Army'.
Replacements are case-sensitive.
Write the output to the file specifed by the variable 'outfile'.
ANSWER:
function q1()
{
  #Valid Variables are: 
     infile=$1
  outfile=$2
sed -e 's/cat/dog/g' -e 's/Navy/Army/g' $1 > $2

}
INSTRUCTOR SOLUTION:
SEE ABOVE!!! INSTEAD, $infile AND $outfile WERE USED, HOWEVER
------------------------------------------------------------------------------------------------------------
Activity 2:
Create a script that will print to standard output all user names from the /etc/passwd file.
ANSWER:
function q1()
{
awk -F':' '{print $1}' < /etc/passwd
}
INSTRUCTOR SOLUTION:
SEE ABOVE, AS ANSWER WAS NOT FURTHER SPECIFIED IN COURSE OF INSTRUCTION
------------------------------------------------------------------------------------------------------------
Activity 3:
Create a script that will perform the following actions:
Print to standard output all usernames from the file path specified by the parameter filename sorted ascending numerically by user id.
The file will be in the format of /etc/passwd
ANSWER:
function q1()
{
  #Valid Variables are:
  filename=$1
  #Your code here
sort -t: -nk3 $1 | awk -F':' '{print $1}' 
}
INSTRUCTOR SOLUTION:
sort -n -t: -k3 $filename | cut -d':' -f1
------------------------------------------------------------------------------------------------------------
Activity 4:
Create a script that will perform the following actions:
Print to standard output the total number of files in the directory specified by dirname.
If the directory does not exist, print 'Invalid Directory'
The count excludes the '.' and '..' pseudo-directories.
ANSWER:
function q1()
{
  #Valid Variables are:
  dirname=$1
  #Your code here
ls -1 $1 | wc -l
}
INSTRUCTOR SOLUTION:
SEE ABOVE, BUT $dirname WAS USED INSTEAD!!!
------------------------------------------------------------------------------------------------------------
Activity 5:
Create a script that will perform the following actions:
Delete all files contained in the directory specified by dirdel
Also delete the directory specified by dirdel
ANSWER:
function q1()
{
  #Valid Variables are:
  dirdel=$1
  #Your code here
rm -rf $1
}
INSTRUCTOR SOLUTION:
SEE ABOVE, AS ANSWER WAS NOT FURTHER SPECIFIED IN COURSE OF INSTRUCTION
------------------------------------------------------------------------------------------------------------
Activity 6:
Create a script that will perform the following actions:
Create a file specified by the name newfile.
Set the file modified date to the value specified in filedate and time to '1730'. NOTE: filedate contains only a valid date in YYYYMMDD format, not a time.
ANSWER:
function q1()
{
  #Valid Variables are:
  newfile=$1
  filedate=$2
touch -t "$21730" $1
  }
INSTRUCTOR SOLUTION:
REMEMBER TO "$variable"1730 RATHER THAN WHAT I DID, IT SHOULD NOT HAVE WORKED!!!
------------------------------------------------------------------------------------------------------------
Activity 7:
Read the file specified by fname and perform an action based on the contents of the file:
If contents are 0 to 9, print "single digit" to standard output.
If contents are 10 to 99, print "double digit" to standard output.
If contents are 100 to 999, print "triple digit" to standard output.
Otherwise, print "Error" to standard output.
NOTE: There will only be one line of content in the file specified by fname.
ANSWER:
function q1()
{
  #Valid Variables are:
  fname=$1
if [ $(cat $1) -le 9 ]; then
    echo single digit
elif [ $(cat $1) -le 99 ]; then
    echo double digit
elif [ $(cat $1) -le 999 ]; then
    echo triple digit
else
    echo Error
fi
}
INSTRUCTOR SOLUTION:
SEE ABOVE, BUT WITH INITIAL VARIABLE ASSIGNMENT cont="cat $fname" AND -lt 10,100,1000 etc... RATHER THAN -le 9,99,999 etc... WAS USED
------------------------------------------------------------------------------------------------------------
Activity 8:
Copy all lines from the file specified by src variable to the file specified by dst variable which DO NOT contain the text specified by match variable.
ANSWER:
function q1()
{
  #Valid Variables are:
  src=$1
  dst=$2
  match=$3
  #Your code here
grep -v "$3" $1 >> $2

}
INSTRUCTOR SOLUTION:
SEE ABOVE!!!
#EXAMPLE - NON SOLUTION:
grep -v loopback StoryHiddenIps > FixedDoc
cat Fixed // SHOULLD RETURN StoryHiddenIps BUT WITH ALL INSTANCES OF loopback REMOVED!!!
------------------------------------------------------------------------------------------------------------
Activity 9:
Terminate the process that has the randomly assigned name specified by procname variable. procname does not contain path information.
ANSWER:
function q1()
{
  #Valid Variables are:
  procname=$1
  #Your code here
pkill $1
}
INSTRUCTOR SOLUTION:
SEE ABOVE, BUT $procname WAS USED INSTEAD!!!
------------------------------------------------------------------------------------------------------------
Activity 10:
Create a sorted full-path list of all files in the directory dirpath that were modified within the previous day. 
Directories should not be included in the output. Print the list to the screen, one item per line.
NOTE: The full paths to files should be in your output. (i.e. /etc/passwd would be included)
NOTE: Directory entries should not be included. (i.e. /etc would NOT be included)
ANSWER:
function q1()
{
  #Valid Variables are:
  dirpath=$1
find $1 -type f -mtime -1 | sort
  #Your code here
}
INSTRUCTOR SOLUTION:
SEE ABOVE, BUT $dirpath WAS USED INSTEAD!!!
------------------------------------------------------------------------------------------------------------
