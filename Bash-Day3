LOOPS:
#!/bin/bash
t1(){
#BASIC COUNTING LOOP:
  for x in {0..10} do
  echo $x
done
}
t2() {
  #COUNTING WHILE LOOP:
  x=0
  while [[ $x -le '10' ]] ; do 
    echo $x
    x=$(($x+1))
  done
}
t3() {
  #A MODIFIED COUNTING WHILE LOOP:
  x=0
  while [[ $x -le 10 ]] ; do 
    echo $x
    x=$(($x+1))
    if [[$x -gt 8 ]] ; then
      break
    fi
  done
}
t4() {
  #A SECOND MODIFIED COUNTING WHILE LOOP:
  x=0
  while [[ $x -le 10 ]] ; do 
    echo $x
    x=$(($x+1))
    if [[$x == eight ]] ; then
      break
    fi
  done
}
t5(){
#COMMAND SUBSTITUTION COUNTING LOOP:
  for x in {'$(cat test.test)',0..10} do
  echo $x
done
}
t1
  RETURNS 0-10 ON SEPERATE LINES BECAUSE IT IS JUST PRINTING THE RANGE OF 0-10, COULD PRINT ANYTHING YOU TELL IT
t2
  RETURNS 0-10 ON SEPERATE LINES BECAUSE IT WAS TOLD TO STOP WHEN X IS NO LONGER LESS THAN TEN
t3
  RETURNS 0-8 AS THE LOOP WAS TOLD TO TERMINATE THE LOOP ONCE X IS GREATER THAN 8
t4 
  RETURNS 0-10 AS X IS NEVER EQUIVALENT IN THIS EXAMPLE TO THE STRING EIGHT; THIS EXAMPLE EXISTS TO DISPLAY POTENTIAL STRING COMPARISON
t5
  RETURNS SAME VALUES AS t1, BUT WITH THE ADDED CONSIDERATION OF THE NEW VARIABLE, THE RESULT OF THE COMMAND SUBSTITUTION DISPLAYED
------------------------------------------------------------------------------------------------------------
CTFD CHALLENGES 20-25:
Activity: Design a script that detects the existence of directory: $HOME/.ssh
Upon successful detection, copies any and all files from within the directory $HOME/.ssh to directory $HOME/SSH and produce no output. You will need to create $HOME/SSH.
Upon un-successful detection, displays the error message "Run ssh-keygen" to the user.
ANSWER:
dir=~/.ssh
if [ -d "$dir" ];
then
    cp -r ~/.ssh ~/SSH
else
    echo "Run ssh-keygen"
fi
INSTRUCTOR SOLUTION:
if [[ -d $HOME/.ssh ]]; then
  mkdir $HOME/SSH
  cp $/HOME/.ssh/* $HOME/SSH/
else
  echo "Run ssh-keygen"
fi
------------------------------------------------------------------------------------------------------------
Activity: Write a script that determines your default gateway ip address. Assign that address to a variable using command substitution.
NOTE: Networking on the CTFd is limited for security reasons. ip route and route are emulated. Use either of those with no switches.
Have your script determine the absolute path of the ping application. Assign the absolute path to a variable using command substitution.
Have your script send six ping packets to your default gateway, utilizing the path discovered in the previous step, and assign the response to a variable using command substitution.
Evaluate the response as being either successful or failure, and print an appropriate message to the screen.
ANSWER:
A=$(ip route | awk '/^default/{print $3}')
B=$(which ping)
C=$($B -c6 $A)
if [[ $C == *"6 received"* ]]; then
   echo "successful";
else
   echo "failure";
fi

INSTRUCTOR SOLUTION:

------------------------------------------------------------------------------------------------------------
Activity: 
Create the following files in a new directory you create $HOME/ZIP:
file1 will contain the md5sum of the text 12345
file2 will contain the md5sum of the text 6789
file3 will contain the md5sum of the text abcdef
Create a zip file containing the three files above, without being stored inside a directory in the zip file. Name the zip file $HOME/ZIP/file.zip
HINT: "Junk" the paths
Utilize tar on $HOME/ZIP/file.zip to archive it into a file called $HOME/ZIP/file.tar.gz which should not include directories. Use the gzip option in tar, DO NOT use a seperate gzip binary.
HINT: You might need an option to change directories first.
ANSWER:
mkdir ~/ZIP
cd ~/ZIP
touch file{1,2,3}
echo  "12345" | md5sum | cut -d" " -f1 > file1 
echo "6789" | md5sum | cut -d" " -f1 > file2
echo "abcdef" | md5sum | cut -d" " -f1 > file3 
zip file.zip file1 file2 file3
tar -cvzf file.tar.gz file.zip

INSTRUCTOR SOLUTION:

------------------------------------------------------------------------------------------------------------
Activity:
Design a basic FOR Loop that iteratively alters the file system and user entries in a passwd-like file for new users: LARRY, CURLY, and MOE.
Each user should have an entry in the $HOME/passwd file
The userid and groupid will be the same and can be found as the sole contents of a file with the user's name in the $HOME directory (i.e. $HOME/LARRY.txt might contain 123)
The home directory will be a directory with the user's name located under the $HOME directory (i.e. $HOME/LARRY)
NOTE: Do NOT use shell expansion when specifying this in the $HOME/passwd file.
The default shell will be /bin/bash
The other fields in the new entries should match root's entry
Users should be created in the order specified

ANSWER:
file=$(head -1 $HOME/passwd)
for x in LARRY CURLY MOE ;
do
    uidgid=$(cat $HOME/$x.txt)
echo $file | awk -F: -v "namefile=$x" -v "d=$uidgid" 'BEGIN {OFS=":"} {$1=namefile} {$3=d} {$4=d} {$6="$HOME/"namefile}                
{$NF="/bin/bash"} {print $0}' >> $HOME/passwd
mkdir $x
done

INSTRUCTOR SOLUTION:

------------------------------------------------------------------------------------------------------------
Activity:

Write a bash script that will find all the files in the /etc directory, and obtains the octal permission of those files. The stat command will be useful for this task.
Depending how you go about your script, you may find writing to the local directory useful. What you must seperate out from the initial results are the octal permissions of 0-640 and those equal to and greater than 642, ie 0-640 goes to low.txt, while 642 is sent to high.txt.
Have your script uniquely sort the contents of the two files by count, numerically-reversed, and output the results, with applicable titles, to the screen. An example of the desired output is shown below.
NOTE: There is a blank line being printed between the two sections of the output below.

ANSWER:
for x in $(stat -c '%a' $(find /etc -type f)) ;
do
    if [[ $x -ge 642 ]] ; then
        echo $x >> high.txt
    else 
        echo $x >> low.txt
fi
done
echo "Files w/ OCTAL Perm Values 642+:\n$(sort high.txt | uniq -c | sort -nr)\n"
echo "Files w/ OCTAL Perm Values 0-640:\n$(sort low.txt | uniq -c | sort -nr)"

INSTRUCTOR SOLUTION:

------------------------------------------------------------------------------------------------------------
